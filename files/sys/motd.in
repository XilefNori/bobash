# -- PS1, PS2, PS4, PROMPT_COMMAND -----------------------------------------------------------

case $INSIDE in
       ssh) HOST_COLOR="${DCYAN}"  ;;
    docker) HOST_COLOR="${DBLUE}"  ;;
      kube) HOST_COLOR="${DPURPLE}";;
         *) HOST_COLOR="${DGREEN}" ;;
esac

ps1_reset_show() {
    unset -f ps1_show && ps1_show() { :; }
}
ps1_reset_show

ps1_show_host() {
    declare bash_hash=''
    if [[ $UID -eq 0 ]]; then
        # No color here allowed -> breaks console history
        bash_hash="${DRED}#${NCOLOR} "
    fi

    echo -n "$bash_hash"

    [[ -n $HOSTNAME_MOTD ]] && echo -n "${HOST_COLOR}${HOSTNAME_MOTD}${NCOLOR}:";
}

ps1_show_res() {
    declare color=0 error='ok'
    declare result=0 i=0

    if [[ ${#LAST_PIPESTATUS[@]} -gt 0 ]]; then
        for i in "${LAST_PIPESTATUS[@]}"; do
            [[ $i -gt 0 ]] && result="$i"
        done
    fi

    # if [[ -z $LAST_COMMAND_RESULT ]]; then
    #     echo '?'
    # fi
    # result="$LAST_COMMAND_RESULT"

    if [[ $result -ne 0 ]]; then
    	# echo -ne "\e[1;41m $result \e[0m"
        case $result in
              1)  color='0;31'; error='error'                    ;;
            126)  color='0;31'; error='cant execute'             ;;
            127)  color='1;33'; error='not found'                ;;
			128)  color='0;31'; error='bad argument'             ;;
  $((128 + 1 )))  color='1;33'; error='hangup'                   ;;
  $((128 + 2 )))  color='1;33'; error='interrupt'                ;;
  $((128 + 3 )))  color='1;33'; error='quit'                     ;;
  $((128 + 4 )))  color='0;31'; error='illegal instruction'      ;;
  $((128 + 5 )))  color='1;34'; error='trace/breakpoint trap'    ;;
  $((128 + 6 )))  color='1;33'; error='abort'                    ;;
  $((128 + 7 )))  color='1;34'; error='emulation trap'           ;;
  $((128 + 8 )))  color='0;31'; error='arithmetic exception'     ;;
  $((128 + 9 )))  color='1;34'; error='killed'                   ;;
  $((128 + 10)))  color='0;31'; error='bus error'                ;;
  $((128 + 11)))  color='0;31'; error='segmentation fault'       ;;
  $((128 + 12)))  color='0;31'; error='bad system call'          ;;
  $((128 + 13)))  color='1;33'; error='broken pipe'              ;;
  $((128 + 15)))  color='0;31'; error='terminated'               ;;
  $((128 + 16)))  color='0;31'; error='user signal 1'            ;;
  $((128 + 17)))  color='0;31'; error='user signal 2'            ;;
			255)  color='0;31'; error='exit status out of range' ;;
              *)  color='0;31'; error="$result"     ;;
        esac
    else
        color='0;37'
    fi

    echo -ne "\e[${color}m$error\e[0m"
}

ps1_show_hash() {
    declare bash_hash='$'
    if [[ $UID -eq 0 ]]; then
        # No color here allowed -> breaks console history
        bash_hash="#"
    fi

    echo -ne $bash_hash
}

prompt-last-command-result () {
    # LAST_COMMAND_RESULT=$? &&
    LAST_PIPESTATUS=("${PIPESTATUS[@]}")  # Must come first!
}

prompt-command-add prompt-last-command-result

PS_HOST='${HOST_COLOR}\u@\h${NCOLOR}'
PS_TIME='${HOST_COLOR}[\A]${NCOLOR}'
PS_PWD='${DYELLOW}\w${NCOLOR}'
PS_PID="\e[1;30m\]\$\$\[\e[0m\]"

# PS1="\n${TIME} \[$DC\]\u@\h\[$NC\] \e[1;30m\][${SHLVL}] $$\[\e[0m\] ${DIR} \$(ps1_show) \$(ps1_show_res)\n$HSH "

PS1=$'\n'"${PS_TIME} "'$(ps1_show_res) $(ps1_show_host)'"${PS_HOST} ${PS_PWD} "'$(ps1_show)'$'\n''$(ps1_show_hash) '

PS2='-> '
PS4='$0.$LINENO+ '

export PS1 PS2 PS4

# PS1="\$? \$(if [[ \$? == 0 ]]; then echo \"\[\033[0;32m\];)\"; else echo \"\[\033[0;31m\];(\"; fi)\[\033[00m\] : "

# -- SETTINGS --------------------------------------------------------------------------------

# Specify that it must be pressed twice to exit:
[[ -z $IGNOREEOF ]] && export IGNOREEOF=1

# Timeformat
export TIMEFORMAT="%2R (%P%%)"

# Turn off ixon mode
# Note that “Ctrl-s” pausing the screen is not a Bash feature (since Bash does not even have
# control of the screen while a command is running); instead, it is a feature of Unix terminals
# in general that have the “stty ixon” mode established. You can check whether it is on by
# typing “stty -a” and can turn it off with “stty -ixon.”

stty -ixon

case $- in
    *i*)
        case "$TERM" in
        screen)
            # export PROMPT_COMMAND='echo -ne "\033k\033\\"'
            ;;
        xterm*|rxvt*|*)
            # export PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
            export TERM_PREV=$TERM
            ;;
        esac
    ;;
esac

# If you do not reset the text color at the end of your prompt, both the text you enter and
# the console text will simply stay in that color. If you want to edit text in a special
# color but still use the default color for command output, you will need to reset the color
# after you press Enter, but still before any commands get run.
# You can do this by installing a DEBUG trap, like this:

# help trap
# If a SIGNAL_SPEC is DEBUG, ARG is executed before every simple command

# trap 'echo -ne "\e[0m"' DEBUG

# -- SHOW INFO --------------------------------------------------------------------------------

system-info() {
    echo "${LW}system${NC}: ${LB}$(distro-pretty)${NC}"
}

bash-info() {
    echo -n "${LW}This is bash ${LG}${BASH_VERSION%.*}${NC}, [$BASH:$$]"
    echo -n ", ${LW}display is "

    if [[ -n "${DISPLAY}" ]]; then
        echo -n "${LG}on${NC} [${LC}${DISPLAY}${NC}]"
    else
        echo -n "${LR}off${NC}"
    fi

    echo ", ${DW}system${NC}: ${LB}$(distro-pretty | tr '[:upper:]' '[:lower:]')${NC}"
}

uptime-info() {
    echo "uptime: $(( $(sed 's/^\([0-9]*\).*/\1/g' /proc/uptime) / 86400 )) days."
    # echo "uptime: $(( $(sed 's/^\([0-9]*\).*/\1/g' /proc/uptime) / 86400 )) days. Load: $(</proc/loadavg)"
}

case $- in
    *i*)
        # Bash info
        bash-info
    ;;
esac

# -- FUNCTIONS ---------------------------------------------------------------

clear() { echo -ne '\ec'; }

prompt-set ()
{
    case "$1" in
        d)
            PS1='$(dirs) \$ '
        ;;
        n)
            PS1='\$ '
        ;;
        hsw)
            PS1='\h[$SHLVL]: \w \$ '
        ;;
        hw)
            PS1='\h: \w \$ '
        ;;
        sh)
            PS1='[$SHLVL] \h\$ '
        ;;
        sw)
            PS1='[$SHLVL] \w \$ '
        ;;
        uh)
            PS1='\u@\h\$ '
        ;;
        uhsHw)
            PS1='\u@\h[$SHLVL]:\#: \w \$ '
        ;;
        uhsw)
            PS1='\u@\h[$SHLVL]: \w \$ '
        ;;
        uhw)
            PS1='\u@\h: \w \$ '
        ;;
        uw)
            PS1='(\u) \w \$ '
        ;;
        w)
            PS1='\w \$ '
        ;;
    esac
}
