# Following regex is based on https://tools.ietf.org/html/rfc3986#appendix-B with
# additional sub-expressions to split authority into userinfo, host and port
#

parse-url() {
    declare debug parts
    # -- Arguments --
    declare flags="OAvp:" OPTIND=1
    declare -a params
    for (( ; OPTIND <= $#; )) do
        if getopts "$flags" flag; then case $flag in
            O) _complete-cmd-options "$flags"; return ;;
            A) return ;;

            v) debug=1 ;;
            p) parts+=("${OPTARG}") ;;
        esac; else
            params+=("${!OPTIND}"); ((OPTIND++))
        fi
    done


    declare URI_REGEX='^(([^:/?#]+):)?(//((([^/?#]+)@)?([^:/?#]+)(:([0-9]+))?))?(/([^?#]*))(\?([^#]*))?(#(.*))?'
    #                    ↑↑            ↑  ↑↑↑           ↑         ↑ ↑            ↑ ↑        ↑  ↑        ↑ ↑
    #                    |2 scheme     |  ||6 userinfo  7 host    | 9 port       | 11 rpath |  13 query | 15 fragment
    #                    1 scheme:     |  |5 userinfo@            8 :…           10 path    12 ?…       14 #…
    #                                  |  4 authority
    #                                  3 //…

    declare url="${params[0]}"
    declare parts=("${params[@]:1}")
    declare part

    if [[ $url =~ $URI_REGEX ]]; then
        if [[ -n $debug ]]; then
            for (( i = 0; i <= 15; i++ )); do
                printf '%2d) [%s]\n' "$i" "${BASH_REMATCH[i]}"
            done
        fi

        for part in "${parts[@]}"; do
            case "$part" in
                   scheme) echo "${BASH_REMATCH[2]}"  ;;
                authority) echo "${BASH_REMATCH[4]}"  ;;
                     user) echo "${BASH_REMATCH[6]}"  ;;
                     host) echo "${BASH_REMATCH[7]}"  ;;
                     port) echo "${BASH_REMATCH[9]}"  ;;
                     path) echo "${BASH_REMATCH[10]}" ;;
                    rpath) echo "${BASH_REMATCH[11]}" ;;
                    query) echo "${BASH_REMATCH[13]}" ;;
                 fragment) echo "${BASH_REMATCH[15]}" ;;
            esac
        done
    fi
}

if which php >& /dev/null; then
    url-decode() { php -r "echo urldecode('$@');" | iconv -f CP1251 -t UTF-8; }
    url-encode() { php -r "echo urlencode('$@');"; }
else
    url-encode() {
        curl -Gso /dev/null -w %{url_effective} --data-urlencode @- "" | cut -c 3-
    }
fi
