cut-display() {
  cut -c-$(tput cols)
}

trim()        { sed 's/^[[:space:]]+//;s/[[:space:]]+$//'; }
mail-nospam() { echo "<$1>" | markdown.pl | sed -r 's|.*">(.*)</a>.*|\1|'; }

paste4sed() { paste -d '|' "$1" "$2" | awk -F'|' '{ print "/"$1"/s|"$1"|"$2"|" }';  }
join4sed()  { join  -t ':' "$1" "$2" | awk -F':' '{ print "s|"$2"|"$3"|" }';        }

_do_translit() {
  sed \
  -e "s/а/a/g"   -e "s/А/A/g"   \
  -e "s/б/b/g"   -e "s/Б/B/g"   \
  -e "s/в/v/g"   -e "s/В/V/g"   \
  -e "s/г/g/g"   -e "s/Г/G/g"   \
  -e "s/д/d/g"   -e "s/Д/D/g"   \
  -e "s/е/e/g"   -e "s/Е/E/g"   \
  -e "s/ё/jo/g"  -e "s/Ё/JO/g"  \
  -e "s/ж/zh/g"  -e "s/Ж/ZH/g"  \
  -e "s/з/z/g"   -e "s/З/Z/g"   \
  -e "s/и/i/g"   -e "s/И/I/g"   \
  -e "s/й/j/g"   -e "s/Й/J/g"   \
  -e "s/к/k/g"   -e "s/К/K/g"   \
  -e "s/л/l/g"   -e "s/Л/L/g"   \
  -e "s/м/m/g"   -e "s/М/M/g"   \
  -e "s/н/n/g"   -e "s/Н/N/g"   \
  -e "s/о/o/g"   -e "s/О/O/g"   \
  -e "s/п/p/g"   -e "s/П/P/g"   \
  -e "s/р/r/g"   -e "s/Р/R/g"   \
  -e "s/с/s/g"   -e "s/С/S/g"   \
  -e "s/т/t/g"   -e "s/Т/T/g"   \
  -e "s/у/u/g"   -e "s/У/U/g"   \
  -e "s/ф/f/g"   -e "s/Ф/F/g"   \
  -e "s/х/x/g"   -e "s/Х/X/g"   \
  -e "s/ц/c/g"   -e "s/Ц/C/g"   \
  -e "s/ч/ch/g"  -e "s/Ч/CH/g"  \
  -e "s/ш/sh/g"  -e "s/Ш/SH/g"  \
  -e "s/щ/sch/g" -e "s/Щ/SCH/g" \
  -e "s/ъ/—/g"   -e "s/Ъ/-/g"   \
  -e "s/ы/y/g"   -e "s/Ы/Y/g"   \
  -e "s/ь/'/g"   -e "s/Ь/'/g"   \
  -e "s/э/e/g"   -e "s/Э/E/g"   \
  -e "s/ю/ju/g"  -e "s/Ю/JU/g"  \
  -e "s/я/ja/g"  -e "s/Я/JA/g"
}

translit() {
	if [ "$1" == "" ]
	then
	  _do_translit
	else
	  echo "$1" | _do_translit
	fi
}

function colorize-log() {
  sed -r "
    # Timestamps
    s/^\[[0-9]{4}[^]]*\]/$DCYAN\\0$NCOLOR/
    s/^[0-9]{4}-[0-9:,/ -]*/$DCYAN\\0$NCOLOR/
    s/^\[[0-9]{2}:[0-9]{2}:[0-9]{2}\]/$DCYAN\\0$NCOLOR/

    # Log levels
    s/\\b(FATAL|CRITICAL)\\b/$DRED\\0$NCOLOR/gi
    s/\\bERROR\\b/$LRED\\0$NCOLOR/gi
    s/\\bWARN(ING)?\\b/$LYELLOW\\0$NCOLOR/gi
    s/\\bINFO\\b/$LWHITE\\0$NCOLOR/gi
    s/\\b(DEBUG|NOTICE)\\b/$LCYAN\\0$NCOLOR/gi
    s/\\bTRACE\\b/$DWHITE\\0$NCOLOR/gi
    s/\\bSUCCESS\\b/$LGREEN\\0$NCOLOR/gi
    s/\\bFAIL\\b/$LRED\\0$NCOLOR/gi

    # Grouped things
    s/ \[[^]]+\] \S+ - /$DWHITE\\0$NCOLOR/
    s/ \([a-zA-Z_][a-zA-Z0-9_$.:]*\)$/$DWHITE\\0$NCOLOR/
  " "$@"
}

# swap stdout and stderr
function stderr-swap() {
   ( "${@}" 3>&1 1>&2- 2>&3- )
}

function ccgrep() {
    [ -n "$2" ] && color="$2" || color='01;31'
    pattern="$1"

    GREP_COLOR="$color" grep --color=always "$pattern"
}

# function patch-color() {
#     file="$1";
#     shift
#     cat "$file" | colordiff  | less -N -pdiff "$@";
# }

# if which colordiff >& /dev/null; then
#     function diff() { command diff -wbBu "$@" | colordiff; }
# else
#     function diff() { command diff -wbBu "$@"; }
# fi

function lss() { "${@}" |& less; }

function cutm() {
    declare field_number=1
    [ -n "$1" ] && field_number="$1"
    declare delim=''
    [ -n "$2" ] && delim="-F$2"

	awk_script="{ print \$$field_number }"
    awk $delim "$awk_script"
}

utf-nobom() { sed -i -b -e '1s/^\xef\xbb\xbf//' "$@"; }

sort-by-length() {
    [[ $1 == '-r' ]] && declare reverse='-r' || reverse=''

    awk '{ print length":"$0 }' | sort -n $reverse | awk -F":" '{$1=""; print $0}' | sed -r '/^ +/s///'
}

lower() { tr '[:upper:]' '[:lower:]' ; }
upper() { tr '[:lower:]' '[:upper:]' ; }

camelCase2underscore() { sed 's/\([A-Z]\)/_\l\1/g;s/^_\([a-z]\)/\1/g'; }

camel2under() {
    # -- Arguments --
    declare flags="u" OPTIND=1
    declare upper
    declare -a params
    for (( ; OPTIND <= $#; )) do
        getopts "$flags" flag && { case $flag in
            u) upper=1 ;;
    	esac; } || {
            params+=("${!OPTIND}"); ((OPTIND++))
        }
    done

    sed 's/\([A-Z]\)/_\l\1/g;s/^_\([a-z]\)/\1/g'
}

uncolor() {
  sed -r "s/\x1B\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[m|K]//g"
}

sort-count() { sort | uniq -c | sort -rn; }

count() { sort | uniq -c | sort -rn; }
