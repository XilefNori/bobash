
# This cheatsheet is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY
# Эта справка распространяется в надежде, что она будет полезной, но БЕЗО ВСЯКИХ ГАРАНТИЙ

Интерактивная обучка по GIT: https://learngitbranching.js.org/ (Learn Git Branching)

# Работа с локальными изменениями ------------------------------------------------------------

git add <path> [<path2>...] :: добавить изменения в индекс по путям <path> <path2>
git add -u                  :: добавить только изменения, без новых файлов
git add -p                  :: добавить изменения в интерактивном режиме

git reset HEAD path         :: убрать файлы по пути ptah из индекса вернув в локальные изменения
git checkout -- file        :: отменить локальные изменения в файле
git checkout <commit> file  :: привести файл file в соответствие коммиту <commit>
git commit -a               :: закоммитить все измененные (кроме новых) файлы

git clean -f                :: удалить untracked файлы из рабочей копии
git clean -n                :: показать какие файлы будут удалены из рабочей копии

git update-index --assume-unchanged <file>    :: Перестать следить за файлом включенным в индекс
git update-index --no-assume-unchanged <file> :: Начать следить за файлом включенным в индекс

# Просмотр изменений -------------------------------------------------------------------------

git show <commit>  :: Показать log и diff коммита

git diff -b -w                         :: посмотреть diff без учета пробелов
git diff --staged                      :: посмотреть изменения файлов в индексе
git diff --cached                      :: посмотреть изменения файлов в индексе

git diff --name-only -S 'string' HEAD^ :: Найти файлы в изменениях которых есть указанная строка
git diff --name-only -G 'patern' HEAD^ :: Найти файлы в изменениях которых есть указанный паттерн

git diff --name-status --diff-filter=U :: посмотреть обновленные файлы

git diff -S verbose | colordiff | less -p verbose :: посмотреть файлы в изменения которых есть строка verbose

# Работа с ветками ---------------------------------------------------------------------------

[detached HEAD]             :: Head который смотрит на коммит на не на ветку

git branch                  :: Получить список веток
git branch -vv              :: Получить список веток с указанием remotei tracking

git branch <branch>         :: Создать новую ветку <branch>
git branch -d <branch>      :: Удалить ветку <branch> (нельзя удалить если ветка не влита merge в master)
git branch -D <branch>      :: Удалить ветку <branch> без учета merge в основную ветку

git branch -f master HEAD~3 :: Переместить ветку master на третий коммит назад от текущего HEAD

git checkout -b <branch>    :: Создать новую ветку <branch> и переключиться на нее
git checkout -              :: Переключиться на предыущую ветку
git checkout branch --force :: Переключиться на ветку выбросив все локальные изменения
git checkout -b <branch> <start> :: Создать ветку <branch> начиная с ветки <start>

git reset --hard HEAD       :: Выбросить все локальные изменения

# Просмотр истории ---------------------------------------------------------------------------

git log -<n> --author <author>       :: Показать историю на n коммитов назад автора <author>
git log --grep <msg>                 :: Показать коммиты где в сообщении есть подстрока <msg> автора author
git log -S <code>                    :: Показать коммиты где в изменениях есть подстрока <code>
git log -p <file> --author <author>  :: Показать историю изменений файла file за авторством author
git log -g                           :: Показать историю пребывания HEAD

git log -L 155,155:<file>            :: Показать историю где менялась строка 155 файла file
git log -L 155,+2:<file>             :: Показать историю где менялась строка 155 и следующая за ней файла file

git log -- "*file*"                  :: Показать историю где менялся файл с маской имени *file*

git show <rev>:<file>                :: Вывести содержимое файла <file> на время ревизии <rev>

git log --pretty=format:'%h %Cblue%cn %Creset%cr %Cgreen%s'

# Откаты коммитов ----------------------------------------------------------------------------

!! Не стоит использовать после push !!

git reset --soft HEAD^      :: отменить последний коммит и превратить его в локальные изменения
git reset --hard HEAD^      :: убить последний коммит полностью
git reset --hard HEAD^^     :: убить 2 последних коммита полностью
git commit --amend          :: дополнить последний коммит

# Слияние и перемещение ----------------------------------------------------------------------

git rebase <master> <bugFix> :: Перенести "новые" коммиты ветки <bugFix> на ветку <master>

# Разрешение конфликтов ----------------------------------------------------------------------

git merge test-development
# Automatic merge failed, a bunch of conflicts!
git checkout --theirs ./path
git add ./path
git commit

# Работа с копилкой --------------------------------------------------------------------------

git stash       :: спрятать текущие изменения в копилку и сбросить текущую рабочую копию до HEAD репозитория
git stash --keep-index :: спрятать все, кроме того что в индексе

git stash list  :: показать все изменения в стеке
git stash show  :: показать последнее изменение в стеке (патч)
git stash apply :: применить последнее изменение из стека к текущей рабочей копии
git stash drop  :: удалить последнее изменение в стеке
git stash pop   :: применить последнее изменение из стека к текущей рабочей копии и удалить его из стека
git stash clear :: очистить стек изменений

# Удаленные репозитарии ----------------------------------------------------------------------

git clone git://repo.git   <dir>
git clone https://repo.git <dir>

git remote -v              :: показать список известных репозитариев
git remote add <rp> <url>  :: добавить ссылку на удаленный репозитарий <url> под именем <rp>
git remote rm  <rp>        :: удалить ссылку на удаленный репозитарий

git push -u <rp> <br>      :: послать изменения из ветки <br> в репозитарий <rp>
git push <rp> -f --all     :: послать все (--all) ветки в репозитарий <rp> заменяя (-f) удаленные ветки на локальные
git push <rp> --prune      :: послать текущую ветку и удалить (--prune) удаленные ветки которые не существуют локально

git fetch                  :: получить снимок репозитария
git fetch -p               :: получить снимок репозитария и удалить ветки не существующие в репозитарии

git pull <rp>              :: git fetch + накатить изменения на текущую ветку (rebase или merge)

git remote -v                      :: показать список известных репозитариев
git config --get remote.origin.url :: показать url репозитария origin
git remote show origin             :: показать данные по репозитарию origin

# Удаленные ветки ----------------------------------------------------------------------------

git checkout -b feat origin/feat :: Создать ветку feat связанную (tracking) с веткой origin/feat
git branch -u origin/feat feat   :: Связать (tracking) ветку feat с веткой origin/feat
git branch -u origin/feat        :: Связать (tracking) текущую ветку с веткой origin/feat

git fetch origin foo~1:bar       :: Создать локальную ветку bar связанную с веткой origin/foo и смотрящую на коммит origin/foo~1

git push origin <br>:<rbr>       :: сохранить локальную ветку <br> на удаленный репозитарий под именем <rbr>
git push origin <ref>~2:<rbr>    :: сохранить коммиты от origin/<rbr> до <ref>~2 на удаленную ветку origin/<rbr>

git push origin :<br>            :: удалить ветку на удаленном репозитарии
git push origin --delete <br>    :: удалить ветку на удаленном репозитарии

git push origin +<branch>        :: жестко обновить ветку на удаленном репозитарии
git push origin -f <branch>      :: жестко обновить ветку на удаленном репозитарии

git push origin -f --all         :: жестко обновить ВСЕ ветки на удаленном репозитарии
git push origin -f --all --prune :: жестко обновить ВСЕ ветки на удаленном репозитарии
                                    и удалить те которым нет соответствия среди локальных веток

git push origin +<br>^1:<rbr>    :: убить последний коммит на удаленном репозитарии
git push origin +HEAD^1:<rbr>    :: убить последний коммит на удаленном репозитарии текущей ветки

# Патчи --------------------------------------------------------------------------------------

dit format-patch HEAD^^..HEAD > some_fix.patch :: Создать патч c мета информацией git
dit diff         HEAD^^..HEAD > some_fix.patch :: Создать обычный патч

git am               < some_fix.patch :: Применить патч с мета информацией
git apply              some_fix.patch :: Применить обычный патч в git

git apply --stat       some_fix.patch :: Посмотреть статистику по патчу
git apply --check      some_fix.patch :: Проверить на конфликты применение патча
git apply --reject     some_fix.patch :: Применить только возможные изменения

patch -p1            < some_fix.patch :: Применить обычный патч вне git

# Применить коммиты из одного репозитария к другому
git --git-dir=/path/to/1/.git format-patch --stdout sha1^..sha1 | git am -3

# Применить коммиты из одного репозитария к другому
/path/to/1 $ git format-patch sha1^..sha1
/path/to/1 $ cd /path/to/2
/path/to/2 $ git am -3 /path/to/1/0001-…-….patch

# Настройки ---------------------------------------------------------------------------------

core.fileMode - Учитывать разницу в правах доступа между индексом и рабочей копией

Изменить настройку для репозитария
git config core.fileMode false

Изменить настройку глобально
git config --global core.fileMode false

Изменить настройку только для текущей команды:
git -c core.fileMode=false diff

# Поиск подстрок по содержимому файлов -------------------------------------------------------

git grep <regexp>                                # Искать в рабочей копии
git grep <regexp> HEAD                           # Искать в HEAD
git grep <regexp> $(git rev-list <rev1>..<rev2>) # Искать в диапазоне коммитов
git grep <regexp> $(git rev-list --all)          # Искать во всех коммитах
git grep -l -e <regexp>                          # Вывести только список файлов
git grep -n -e <regexp>                          # Вывести также номера строк
git grep -e <regexp1> [--or] -e <regexp2>        # Есть хотя бы одна из подстрок
git grep -e <regexp1> --and -e <regexp2>         # Есть обе указанные подстроки

# Найти файлы и строки где есть обе указанные подстроки в HEAD коммите
git grep -n -e 'CityHelper::getFile' --and -e 'districts' HEAD

# Мержи --------------------------------------------------------------------------------------

git merge -Xtheirs master :: Смержить текущую ветку c master разрешая конфлиткы в пользу master

# Работа с тегами ----------------------------------------------------------------------------

git tag -a v1.0.3 master -f -m '' :: Добавить/переместить тег v1.0.3 на ветку мастер
git push --tags                   :: Отправить теги на удаленный репозитарий
git tag -d v1.0.3                 :: Удалить тег локально
git push --delete v1.0.3 origin   :: Удалить тег в удаленном репозитарии

# Сложные операции --------------------------------------------------------------------------

Получить в архиве(или просто в папке) все файлы которые изменились с определённой ревизии, в той же файловой структуре как и в репозитории?

git diff --name-status commit1 commit2 | awk '{ if ($1 != "D") print $2 }' | xargs git archive -o output.zip HEAD

Удалить все файлы при слиянии, которые не нужны в текущем репозитории и были ранее удалены (deleted by us):
for i in `git status | grep 'deleted by us' | awk '{print $5}'`; do git rm $i; done

Получить спиcок всех удаленных веток и даты последних коммитов
for branch in `git branch -r | grep -v HEAD`;do echo -e `git show --format="%ci %cr" $branch | head -n 1` \\t$branch; done | sort -r
