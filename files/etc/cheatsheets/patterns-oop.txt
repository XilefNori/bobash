Порождающие паттерны:
- Одиночка            - Всегда возвращает один и тот же объект, создавая его при необходимости
- Фабричный метод     - Создает множество          объектов с одним   интерфейсом  через подклассы
- Абстрактная фабрика - Создает множество семейств объектов с разными интерфейсами через подклассы
- Строитель           - Конструирует объекты последовательностью вызовов строительных методов
- Прототип            - Создает объекты путем клонирования из предзаданного множества

Структурные паттерны:
- Фасад               - Простой интерфейс к сложной подсистеме для конкретного сценария использования
- Адаптер             - Удобный интерфейс к стороннему функционалу с неудобным интерфейсом
- Мост                - Слой абстракции подсистемы с множеством возможных реализаций (драйверов)
- Декоратор           - Обертка на объект с тем же интерфейсом: новое поведение  + проброс вызовов
- Заместитель         - Обертка на объект с тем же интерфейсом: контроль доступа + проброс вызовов
- Компоновщик         - Сборщик коллекций и единичных объектов в одно целое для доступа к функциям как у единичного объекта
- Легковес            - Дешевое хранение массы объектов: не дублировать тысячу раз одно и то же состояние, а ссылаться на их ограниченный набор

Поведенческие паттерны:
- Шаблонный метод      - Метод с вызовом служебных методов которые можно переопределить в подклассах
- Итератор             - Объект для обхода коллекции (получение текущего, переход к следующему) с хранением состояния обхода
- Стратегия            - Объект с одним методом реализующим некоторую функцию, объект можно подменять для изменения функции
- Посетитель           - Объект с набором методов для известного множества классов (по одному методу на класс): соответствующий метод вызывается объектами (данного множества классов) при их посещении
- Посредник            - В группе связанных объектов: принимает от объектов сообщения для управления состоянием остальных объектов группы, вместо прямых связей между объектами
- Наблюдатель          - Дает возможность другим объектам подписаться на события (добавив себя в подписчики) и рассылает объекты событий подписчикам
- Цепочка обязанностей - Коллекция обработчиков запроса с известным интерфейсом для динамического управления процессом обработки этого запроса
- Состояние            - Инкапсуляция разного поведения одних и тех методов объекта через множество подклассов состояний
- Хранитель            - Объект умеет сохранять/восстанавливать себя в/из специальные объекты снимков состояния
- Команда              - Инкапсуляция операции в объект (в нем хранятся: ссылка на исполнителя и параметры операции), на каждую операцию - свой подкласс, объекты команд можно сохранять и передавать, а команды откатывать

---------------------------------------------------

Decorator informs and empowers its client.
Proxy restricts and disempowers its client.
